name: Deploy ${{ vars.DOMAIN }}

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Load environment variables
        run: |
          echo "PROJECT_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "DOMAIN=${{ vars.DOMAIN }}" >> $GITHUB_ENV
          echo "DOCKER_USERNAME=${{ vars.DOCKER_USERNAME }}" >> $GITHUB_ENV
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:latest
      
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull ${{ env.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:latest
            docker stop ${{ env.PROJECT_NAME }} || true
            docker rm ${{ env.PROJECT_NAME }} || true
            docker run -d --name ${{ env.PROJECT_NAME }} --network web \
              -l "traefik.enable=true" \
              -l "traefik.http.routers.${{ env.PROJECT_NAME }}.rule=Host(\`${{ env.DOMAIN }}\`) || Host(\`www.${{ env.DOMAIN }}\`)" \
              -l "traefik.http.routers.${{ env.PROJECT_NAME }}.entrypoints=websecure" \
              -l "traefik.http.routers.${{ env.PROJECT_NAME }}.tls.certresolver=myresolver" \
              -l "traefik.http.services.${{ env.PROJECT_NAME }}.loadbalancer.server.port=80" \
              ${{ env.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:latest

# To add a new site:
# 1. Create a new GitHub repository for the site. The repository name will be used as the PROJECT_NAME.
# 2. Copy this workflow file to the new repository
# 3. In your GitHub repository, go to Settings > Secrets and variables > Actions
# 4. Under "Variables", add:
#    - DOMAIN: Your domain name (without www)
#    - DOCKER_USERNAME: Your Docker Hub username
# 5. Under "Secrets", add:
#    - DOCKERHUB_TOKEN: Your Docker Hub access token
#    - SERVER_IP: Your server's IP address
#    - SERVER_USER: Your server's SSH username
#    - SERVER_SSH_KEY: Your server's SSH private key
# 6. Ensure your Dockerfile is set up correctly in the new project
# 7. Push your code to the new repository to trigger the deployment